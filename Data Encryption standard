#include <stdio.h>
#include <stdint.h>

// Simple XOR-based Feistel function
uint32_t feistel(uint32_t half, uint32_t subkey) {
    return half ^ subkey;
}

// Encrypt/Decrypt with 16 rounds
uint64_t des_rounds(uint64_t data, uint32_t key, int decrypt) {
    uint32_t L = data >> 32;
    uint32_t R = data & 0xFFFFFFFF;

    for (int i = 0; i < 16; i++) {
        int round = decrypt ? 15 - i : i;
        uint32_t temp = R;
        R = L ^ feistel(R, key ^ round);
        L = temp;
    }

    return ((uint64_t)R << 32) | L;
}

int main() {
    uint64_t plaintext;
    uint32_t key;

    printf("Enter 16-digit hex plaintext (e.g. 123456789ABCDEF0): ");
    if (scanf("%llx", &plaintext) != 1) {
        printf("Invalid input for plaintext.\n");
        return 1;
    }

    printf("Enter 8-digit hex key (e.g. 0F1571C8): ");
    if (scanf("%x", &key) != 1) {
        printf("Invalid input for key.\n");
        return 1;
    }

    uint64_t encrypted = des_rounds(plaintext, key, 0);
    uint64_t decrypted = des_rounds(encrypted, key, 1);

    printf("\nEncrypted : 0x%016llX\n", encrypted);
    printf("Decrypted : 0x%016llX\n", decrypted);

    return 0;
}
